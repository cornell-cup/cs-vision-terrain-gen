#ifndef IMAGEFILTERING_H_
#define IMAGEFILTERING_H_

#include <opencv2/opencv.hpp>
#include <iostream>
#include <string>

#include "HsvColorRange.h"
#include "Vision.h"
#include "ipp.h"

/** This class do the image filtering job.
 * It is done by first converting the image from RGB to HSV and then thresholding the HSV image.
 */
class ImageFiltering {
	/**The hue range assigned for each color */
	static const int colorRange=10;
	/**This stores the image in HSV type */
	cv::Mat filteredImage;
	/**This stores the finally thresholded image for each color */
	cv::Mat colorThresh[NUM_SYSTEM_COLORS];
	/**This stores an intermediate product */
	cv::Mat colorThresh2[NUM_SYSTEM_COLORS];
	/**This indicates the lower boundary hue value of a color */
	cv::Scalar hsv_min1[NUM_SYSTEM_COLORS];
	/**This indicates the upper boundary hue value of a color */
	cv::Scalar hsv_max1[NUM_SYSTEM_COLORS];
	/**This indicates the lower boundary hue value of a color when color range across 255 */
	cv::Scalar hsv_min2[NUM_SYSTEM_COLORS];
	/**This indicates the upper boundary hue value of a color when color range across 255 */
	cv::Scalar hsv_max2[NUM_SYSTEM_COLORS];
	
public:
	
	/** Constructor
	 * It reads the color data from disk and sets boundary values.
	 */
	ImageFiltering(const char* hsvFile);
	/**
	 * This function reads out color data generated by color calibration program.
	 * @param fileName is where the data file is stored.
	 * @return true if file is successfully read.
	 */
	bool readColors(const char* fileName);
	/**
	 * This function does the thresholding job.
	 * @param mergedImage is the location of the image to be filtered.
	 */
	void filter(const cv::Mat& mergedImage, const cv::Rect& roi);
	/**
	 * This function takes care of size change after merging.
	 * @param mergedImage is the location of the image to be filtered.
	 */
	void resize(const cv::Mat& mergedImage);
	/**
	 * This function gets the filtered image as a constant reference.
	 * @param index indicates the id of system color
	 * @return a reference of the filtered image.
	 */
	const cv::Mat& getFilteredImage(int index);
	/**
	 * This function gets the filtered image as a constant reference.
	 * @return a reference of the filtered image.
	 */
	const cv::Mat* getFilteredImages();

	/** Colors to be recognized by the filter */
	HsvColorRange  systemColors[NUM_SYSTEM_COLORS];
};

#endif /* IMAGEFILTERING_H_ */
