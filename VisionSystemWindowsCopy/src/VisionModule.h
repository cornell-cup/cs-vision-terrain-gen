// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `VisionModule.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __C__Users_vision_Documents_Visual_Studio_2010_Projects_Vision_VisionWindows_VisionPipelined_src_VisionModule_h__
#define __C__Users_vision_Documents_Visual_Studio_2010_Projects_Vision_VisionWindows_VisionPipelined_src_VisionModule_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace VisionModule
{

class VisionInterface;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::VisionModule::VisionInterface>&);
::IceProxy::Ice::Object* upCast(::IceProxy::VisionModule::VisionInterface*);

class BaseInterface;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::VisionModule::BaseInterface>&);
::IceProxy::Ice::Object* upCast(::IceProxy::VisionModule::BaseInterface*);

}

}

namespace VisionModule
{

class VisionInterface;
bool operator==(const VisionInterface&, const VisionInterface&);
bool operator<(const VisionInterface&, const VisionInterface&);
::Ice::Object* upCast(::VisionModule::VisionInterface*);
typedef ::IceInternal::Handle< ::VisionModule::VisionInterface> VisionInterfacePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::VisionModule::VisionInterface> VisionInterfacePrx;
void __patch(VisionInterfacePtr&, const ::Ice::ObjectPtr&);

class BaseInterface;
bool operator==(const BaseInterface&, const BaseInterface&);
bool operator<(const BaseInterface&, const BaseInterface&);
::Ice::Object* upCast(::VisionModule::BaseInterface*);
typedef ::IceInternal::Handle< ::VisionModule::BaseInterface> BaseInterfacePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::VisionModule::BaseInterface> BaseInterfacePrx;
void __patch(BaseInterfacePtr&, const ::Ice::ObjectPtr&);

}

namespace VisionModule
{

struct ColorRGB
{
    ::Ice::Int redValue;
    ::Ice::Int greenValue;
    ::Ice::Int blueValue;

    bool operator==(const ColorRGB& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(redValue != __rhs.redValue)
        {
            return false;
        }
        if(greenValue != __rhs.greenValue)
        {
            return false;
        }
        if(blueValue != __rhs.blueValue)
        {
            return false;
        }
        return true;
    }

    bool operator<(const ColorRGB& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(redValue < __rhs.redValue)
        {
            return true;
        }
        else if(__rhs.redValue < redValue)
        {
            return false;
        }
        if(greenValue < __rhs.greenValue)
        {
            return true;
        }
        else if(__rhs.greenValue < greenValue)
        {
            return false;
        }
        if(blueValue < __rhs.blueValue)
        {
            return true;
        }
        else if(__rhs.blueValue < blueValue)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const ColorRGB& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const ColorRGB& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const ColorRGB& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const ColorRGB& __rhs) const
    {
        return !operator<(__rhs);
    }
};

struct Blob
{
    ::Ice::Double x;
    ::Ice::Double y;
    ::Ice::Int isProjectile;
    ::VisionModule::ColorRGB color1;
    ::VisionModule::ColorRGB color2;
    ::Ice::Double orientation;
    ::Ice::Double velocityx;
    ::Ice::Double velocityy;
    ::Ice::Double velocityRot;
    ::Ice::Int botID;
    ::Ice::Double time;
};

typedef ::std::vector< ::VisionModule::Blob> VisionData;

}

namespace Ice
{
template<>
struct StreamableTraits< ::VisionModule::ColorRGB>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 12;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::VisionModule::ColorRGB, S>
{
    static void write(S* __os, const ::VisionModule::ColorRGB& v)
    {
        __os->write(v.redValue);
        __os->write(v.greenValue);
        __os->write(v.blueValue);
    }
};

template<class S>
struct StreamReader< ::VisionModule::ColorRGB, S>
{
    static void read(S* __is, ::VisionModule::ColorRGB& v)
    {
        __is->read(v.redValue);
        __is->read(v.greenValue);
        __is->read(v.blueValue);
    }
};

template<>
struct StreamableTraits< ::VisionModule::Blob>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 88;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::VisionModule::Blob, S>
{
    static void write(S* __os, const ::VisionModule::Blob& v)
    {
        __os->write(v.x);
        __os->write(v.y);
        __os->write(v.isProjectile);
        __os->write(v.color1);
        __os->write(v.color2);
        __os->write(v.orientation);
        __os->write(v.velocityx);
        __os->write(v.velocityy);
        __os->write(v.velocityRot);
        __os->write(v.botID);
        __os->write(v.time);
    }
};

template<class S>
struct StreamReader< ::VisionModule::Blob, S>
{
    static void read(S* __is, ::VisionModule::Blob& v)
    {
        __is->read(v.x);
        __is->read(v.y);
        __is->read(v.isProjectile);
        __is->read(v.color1);
        __is->read(v.color2);
        __is->read(v.orientation);
        __is->read(v.velocityx);
        __is->read(v.velocityy);
        __is->read(v.velocityRot);
        __is->read(v.botID);
        __is->read(v.time);
    }
};

}

namespace VisionModule
{

class Callback_VisionInterface_ping_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_VisionInterface_ping_Base> Callback_VisionInterface_pingPtr;

class Callback_VisionInterface_getVision_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_VisionInterface_getVision_Base> Callback_VisionInterface_getVisionPtr;

class Callback_BaseInterface_ping_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_BaseInterface_ping_Base> Callback_BaseInterface_pingPtr;

class Callback_BaseInterface_update_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_BaseInterface_update_Base> Callback_BaseInterface_updatePtr;

}

namespace IceProxy
{

namespace VisionModule
{

class VisionInterface : virtual public ::IceProxy::Ice::Object
{
public:

    ::Ice::Double ping(::Ice::Double a, ::Ice::Double b, ::Ice::Double c, ::Ice::Double d, ::Ice::Double e, ::Ice::Double f, ::Ice::Double g, ::Ice::Double h, ::Ice::Double i, ::Ice::Double j, ::Ice::Double k, ::Ice::Double l)
    {
        return ping(a, b, c, d, e, f, g, h, i, j, k, l, 0);
    }
    ::Ice::Double ping(::Ice::Double a, ::Ice::Double b, ::Ice::Double c, ::Ice::Double d, ::Ice::Double e, ::Ice::Double f, ::Ice::Double g, ::Ice::Double h, ::Ice::Double i, ::Ice::Double j, ::Ice::Double k, ::Ice::Double l, const ::Ice::Context& __ctx)
    {
        return ping(a, b, c, d, e, f, g, h, i, j, k, l, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_ping(::Ice::Double a, ::Ice::Double b, ::Ice::Double c, ::Ice::Double d, ::Ice::Double e, ::Ice::Double f, ::Ice::Double g, ::Ice::Double h, ::Ice::Double i, ::Ice::Double j, ::Ice::Double k, ::Ice::Double l, const ::IceInternal::Function<void (::Ice::Double)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_ping(a, b, c, d, e, f, g, h, i, j, k, l, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_ping(::Ice::Double a, ::Ice::Double b, ::Ice::Double c, ::Ice::Double d, ::Ice::Double e, ::Ice::Double f, ::Ice::Double g, ::Ice::Double h, ::Ice::Double i, ::Ice::Double j, ::Ice::Double k, ::Ice::Double l, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_ping(a, b, c, d, e, f, g, h, i, j, k, l, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_ping(::Ice::Double a, ::Ice::Double b, ::Ice::Double c, ::Ice::Double d, ::Ice::Double e, ::Ice::Double f, ::Ice::Double g, ::Ice::Double h, ::Ice::Double i, ::Ice::Double j, ::Ice::Double k, ::Ice::Double l, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Double)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_ping(a, b, c, d, e, f, g, h, i, j, k, l, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_ping(::Ice::Double a, ::Ice::Double b, ::Ice::Double c, ::Ice::Double d, ::Ice::Double e, ::Ice::Double f, ::Ice::Double g, ::Ice::Double h, ::Ice::Double i, ::Ice::Double j, ::Ice::Double k, ::Ice::Double l, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_ping(a, b, c, d, e, f, g, h, i, j, k, l, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_ping(::Ice::Double a, ::Ice::Double b, ::Ice::Double c, ::Ice::Double d, ::Ice::Double e, ::Ice::Double f, ::Ice::Double g, ::Ice::Double h, ::Ice::Double i, ::Ice::Double j, ::Ice::Double k, ::Ice::Double l, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Double)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Double)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::VisionModule::VisionInterfacePrx __proxy = ::VisionModule::VisionInterfacePrx::uncheckedCast(__result->getProxy());
                ::Ice::Double __ret;
                try
                {
                    __ret = __proxy->end_ping(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Double)> _response;
        };
        return begin_ping(a, b, c, d, e, f, g, h, i, j, k, l, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_ping(::Ice::Double a, ::Ice::Double b, ::Ice::Double c, ::Ice::Double d, ::Ice::Double e, ::Ice::Double f, ::Ice::Double g, ::Ice::Double h, ::Ice::Double i, ::Ice::Double j, ::Ice::Double k, ::Ice::Double l)
    {
        return begin_ping(a, b, c, d, e, f, g, h, i, j, k, l, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ping(::Ice::Double a, ::Ice::Double b, ::Ice::Double c, ::Ice::Double d, ::Ice::Double e, ::Ice::Double f, ::Ice::Double g, ::Ice::Double h, ::Ice::Double i, ::Ice::Double j, ::Ice::Double k, ::Ice::Double l, const ::Ice::Context& __ctx)
    {
        return begin_ping(a, b, c, d, e, f, g, h, i, j, k, l, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ping(::Ice::Double a, ::Ice::Double b, ::Ice::Double c, ::Ice::Double d, ::Ice::Double e, ::Ice::Double f, ::Ice::Double g, ::Ice::Double h, ::Ice::Double i, ::Ice::Double j, ::Ice::Double k, ::Ice::Double l, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ping(a, b, c, d, e, f, g, h, i, j, k, l, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ping(::Ice::Double a, ::Ice::Double b, ::Ice::Double c, ::Ice::Double d, ::Ice::Double e, ::Ice::Double f, ::Ice::Double g, ::Ice::Double h, ::Ice::Double i, ::Ice::Double j, ::Ice::Double k, ::Ice::Double l, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ping(a, b, c, d, e, f, g, h, i, j, k, l, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ping(::Ice::Double a, ::Ice::Double b, ::Ice::Double c, ::Ice::Double d, ::Ice::Double e, ::Ice::Double f, ::Ice::Double g, ::Ice::Double h, ::Ice::Double i, ::Ice::Double j, ::Ice::Double k, ::Ice::Double l, const ::VisionModule::Callback_VisionInterface_pingPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ping(a, b, c, d, e, f, g, h, i, j, k, l, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ping(::Ice::Double a, ::Ice::Double b, ::Ice::Double c, ::Ice::Double d, ::Ice::Double e, ::Ice::Double f, ::Ice::Double g, ::Ice::Double h, ::Ice::Double i, ::Ice::Double j, ::Ice::Double k, ::Ice::Double l, const ::Ice::Context& __ctx, const ::VisionModule::Callback_VisionInterface_pingPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ping(a, b, c, d, e, f, g, h, i, j, k, l, &__ctx, __del, __cookie);
    }

    ::Ice::Double end_ping(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Double ping(::Ice::Double, ::Ice::Double, ::Ice::Double, ::Ice::Double, ::Ice::Double, ::Ice::Double, ::Ice::Double, ::Ice::Double, ::Ice::Double, ::Ice::Double, ::Ice::Double, ::Ice::Double, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_ping(::Ice::Double, ::Ice::Double, ::Ice::Double, ::Ice::Double, ::Ice::Double, ::Ice::Double, ::Ice::Double, ::Ice::Double, ::Ice::Double, ::Ice::Double, ::Ice::Double, ::Ice::Double, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::VisionModule::VisionData getVision()
    {
        return getVision(0);
    }
    ::VisionModule::VisionData getVision(const ::Ice::Context& __ctx)
    {
        return getVision(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getVision(const ::IceInternal::Function<void (const ::VisionModule::VisionData&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getVision(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getVision(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getVision(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getVision(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::VisionModule::VisionData&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getVision(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getVision(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getVision(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getVision(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::VisionModule::VisionData&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::VisionModule::VisionData&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::VisionModule::VisionInterfacePrx __proxy = ::VisionModule::VisionInterfacePrx::uncheckedCast(__result->getProxy());
                ::VisionModule::VisionData __ret;
                try
                {
                    __ret = __proxy->end_getVision(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::VisionModule::VisionData&)> _response;
        };
        return begin_getVision(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getVision()
    {
        return begin_getVision(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getVision(const ::Ice::Context& __ctx)
    {
        return begin_getVision(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getVision(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVision(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVision(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVision(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVision(const ::VisionModule::Callback_VisionInterface_getVisionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVision(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVision(const ::Ice::Context& __ctx, const ::VisionModule::Callback_VisionInterface_getVisionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVision(&__ctx, __del, __cookie);
    }

    ::VisionModule::VisionData end_getVision(const ::Ice::AsyncResultPtr&);
    
private:

    ::VisionModule::VisionData getVision(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getVision(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<VisionInterface> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<VisionInterface*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<VisionInterface> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<VisionInterface*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<VisionInterface> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<VisionInterface*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<VisionInterface> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<VisionInterface*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<VisionInterface> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<VisionInterface*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<VisionInterface> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<VisionInterface*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<VisionInterface> ice_secure(bool __secure) const
    {
        return dynamic_cast<VisionInterface*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<VisionInterface> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<VisionInterface*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<VisionInterface> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<VisionInterface*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<VisionInterface> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<VisionInterface*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<VisionInterface> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<VisionInterface*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<VisionInterface> ice_twoway() const
    {
        return dynamic_cast<VisionInterface*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<VisionInterface> ice_oneway() const
    {
        return dynamic_cast<VisionInterface*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<VisionInterface> ice_batchOneway() const
    {
        return dynamic_cast<VisionInterface*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<VisionInterface> ice_datagram() const
    {
        return dynamic_cast<VisionInterface*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<VisionInterface> ice_batchDatagram() const
    {
        return dynamic_cast<VisionInterface*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<VisionInterface> ice_compress(bool __compress) const
    {
        return dynamic_cast<VisionInterface*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<VisionInterface> ice_timeout(int __timeout) const
    {
        return dynamic_cast<VisionInterface*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<VisionInterface> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<VisionInterface*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<VisionInterface> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<VisionInterface*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class BaseInterface : virtual public ::IceProxy::Ice::Object
{
public:

    ::Ice::Double ping()
    {
        return ping(0);
    }
    ::Ice::Double ping(const ::Ice::Context& __ctx)
    {
        return ping(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_ping(const ::IceInternal::Function<void (::Ice::Double)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_ping(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_ping(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_ping(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_ping(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Double)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_ping(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_ping(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_ping(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_ping(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Double)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Double)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::VisionModule::BaseInterfacePrx __proxy = ::VisionModule::BaseInterfacePrx::uncheckedCast(__result->getProxy());
                ::Ice::Double __ret;
                try
                {
                    __ret = __proxy->end_ping(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Double)> _response;
        };
        return begin_ping(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_ping()
    {
        return begin_ping(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ping(const ::Ice::Context& __ctx)
    {
        return begin_ping(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ping(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ping(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ping(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ping(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ping(const ::VisionModule::Callback_BaseInterface_pingPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ping(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ping(const ::Ice::Context& __ctx, const ::VisionModule::Callback_BaseInterface_pingPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ping(&__ctx, __del, __cookie);
    }

    ::Ice::Double end_ping(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Double ping(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_ping(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int update(const ::VisionModule::VisionData& data)
    {
        return update(data, 0);
    }
    ::Ice::Int update(const ::VisionModule::VisionData& data, const ::Ice::Context& __ctx)
    {
        return update(data, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_update(const ::VisionModule::VisionData& data, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_update(data, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_update(const ::VisionModule::VisionData& data, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_update(data, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_update(const ::VisionModule::VisionData& data, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_update(data, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_update(const ::VisionModule::VisionData& data, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_update(data, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_update(const ::VisionModule::VisionData& data, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::VisionModule::BaseInterfacePrx __proxy = ::VisionModule::BaseInterfacePrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_update(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_update(data, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_update(const ::VisionModule::VisionData& data)
    {
        return begin_update(data, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_update(const ::VisionModule::VisionData& data, const ::Ice::Context& __ctx)
    {
        return begin_update(data, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_update(const ::VisionModule::VisionData& data, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_update(data, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_update(const ::VisionModule::VisionData& data, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_update(data, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_update(const ::VisionModule::VisionData& data, const ::VisionModule::Callback_BaseInterface_updatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_update(data, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_update(const ::VisionModule::VisionData& data, const ::Ice::Context& __ctx, const ::VisionModule::Callback_BaseInterface_updatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_update(data, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_update(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int update(const ::VisionModule::VisionData&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_update(const ::VisionModule::VisionData&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<BaseInterface> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<BaseInterface*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<BaseInterface> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<BaseInterface*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<BaseInterface> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<BaseInterface*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<BaseInterface> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<BaseInterface*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<BaseInterface> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<BaseInterface*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<BaseInterface> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<BaseInterface*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<BaseInterface> ice_secure(bool __secure) const
    {
        return dynamic_cast<BaseInterface*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<BaseInterface> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<BaseInterface*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<BaseInterface> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<BaseInterface*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<BaseInterface> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<BaseInterface*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<BaseInterface> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<BaseInterface*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<BaseInterface> ice_twoway() const
    {
        return dynamic_cast<BaseInterface*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<BaseInterface> ice_oneway() const
    {
        return dynamic_cast<BaseInterface*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<BaseInterface> ice_batchOneway() const
    {
        return dynamic_cast<BaseInterface*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<BaseInterface> ice_datagram() const
    {
        return dynamic_cast<BaseInterface*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<BaseInterface> ice_batchDatagram() const
    {
        return dynamic_cast<BaseInterface*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<BaseInterface> ice_compress(bool __compress) const
    {
        return dynamic_cast<BaseInterface*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<BaseInterface> ice_timeout(int __timeout) const
    {
        return dynamic_cast<BaseInterface*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<BaseInterface> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<BaseInterface*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<BaseInterface> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<BaseInterface*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace VisionModule
{

class VisionInterface : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::Ice::Double ping(::Ice::Double, ::Ice::Double, ::Ice::Double, ::Ice::Double, ::Ice::Double, ::Ice::Double, ::Ice::Double, ::Ice::Double, ::Ice::Double, ::Ice::Double, ::Ice::Double, ::Ice::Double, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::VisionModule::VisionData getVision(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class BaseInterface : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::Ice::Double ping(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int update(const ::VisionModule::VisionData&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace VisionModule
{

class VisionInterface : virtual public ::IceDelegate::VisionModule::VisionInterface,
                        virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::Ice::Double ping(::Ice::Double, ::Ice::Double, ::Ice::Double, ::Ice::Double, ::Ice::Double, ::Ice::Double, ::Ice::Double, ::Ice::Double, ::Ice::Double, ::Ice::Double, ::Ice::Double, ::Ice::Double, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::VisionModule::VisionData getVision(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class BaseInterface : virtual public ::IceDelegate::VisionModule::BaseInterface,
                      virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::Ice::Double ping(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int update(const ::VisionModule::VisionData&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace VisionModule
{

class VisionInterface : virtual public ::IceDelegate::VisionModule::VisionInterface,
                        virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::Ice::Double ping(::Ice::Double, ::Ice::Double, ::Ice::Double, ::Ice::Double, ::Ice::Double, ::Ice::Double, ::Ice::Double, ::Ice::Double, ::Ice::Double, ::Ice::Double, ::Ice::Double, ::Ice::Double, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::VisionModule::VisionData getVision(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class BaseInterface : virtual public ::IceDelegate::VisionModule::BaseInterface,
                      virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::Ice::Double ping(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int update(const ::VisionModule::VisionData&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace VisionModule
{

class VisionInterface : virtual public ::Ice::Object
{
public:

    typedef VisionInterfacePrx ProxyType;
    typedef VisionInterfacePtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Ice::Double ping(::Ice::Double, ::Ice::Double, ::Ice::Double, ::Ice::Double, ::Ice::Double, ::Ice::Double, ::Ice::Double, ::Ice::Double, ::Ice::Double, ::Ice::Double, ::Ice::Double, ::Ice::Double, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___ping(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::VisionModule::VisionData getVision(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getVision(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const VisionInterface& l, const VisionInterface& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const VisionInterface& l, const VisionInterface& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class BaseInterface : virtual public ::Ice::Object
{
public:

    typedef BaseInterfacePrx ProxyType;
    typedef BaseInterfacePtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Ice::Double ping(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___ping(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int update(const ::VisionModule::VisionData&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___update(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const BaseInterface& l, const BaseInterface& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const BaseInterface& l, const BaseInterface& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace VisionModule
{

template<class T>
class CallbackNC_VisionInterface_ping : public Callback_VisionInterface_ping_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Double);

    CallbackNC_VisionInterface_ping(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VisionModule::VisionInterfacePrx __proxy = ::VisionModule::VisionInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Double __ret;
        try
        {
            __ret = __proxy->end_ping(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_VisionInterface_pingPtr
newCallback_VisionInterface_ping(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Double), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_VisionInterface_ping<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_VisionInterface_pingPtr
newCallback_VisionInterface_ping(T* instance, void (T::*cb)(::Ice::Double), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_VisionInterface_ping<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_VisionInterface_ping : public Callback_VisionInterface_ping_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Double, const CT&);

    Callback_VisionInterface_ping(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VisionModule::VisionInterfacePrx __proxy = ::VisionModule::VisionInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Double __ret;
        try
        {
            __ret = __proxy->end_ping(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_VisionInterface_pingPtr
newCallback_VisionInterface_ping(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Double, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_VisionInterface_ping<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_VisionInterface_pingPtr
newCallback_VisionInterface_ping(T* instance, void (T::*cb)(::Ice::Double, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_VisionInterface_ping<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_VisionInterface_getVision : public Callback_VisionInterface_getVision_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::VisionModule::VisionData&);

    CallbackNC_VisionInterface_getVision(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VisionModule::VisionInterfacePrx __proxy = ::VisionModule::VisionInterfacePrx::uncheckedCast(__result->getProxy());
        ::VisionModule::VisionData __ret;
        try
        {
            __ret = __proxy->end_getVision(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_VisionInterface_getVisionPtr
newCallback_VisionInterface_getVision(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::VisionModule::VisionData&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_VisionInterface_getVision<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_VisionInterface_getVisionPtr
newCallback_VisionInterface_getVision(T* instance, void (T::*cb)(const ::VisionModule::VisionData&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_VisionInterface_getVision<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_VisionInterface_getVision : public Callback_VisionInterface_getVision_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::VisionModule::VisionData&, const CT&);

    Callback_VisionInterface_getVision(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VisionModule::VisionInterfacePrx __proxy = ::VisionModule::VisionInterfacePrx::uncheckedCast(__result->getProxy());
        ::VisionModule::VisionData __ret;
        try
        {
            __ret = __proxy->end_getVision(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_VisionInterface_getVisionPtr
newCallback_VisionInterface_getVision(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::VisionModule::VisionData&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_VisionInterface_getVision<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_VisionInterface_getVisionPtr
newCallback_VisionInterface_getVision(T* instance, void (T::*cb)(const ::VisionModule::VisionData&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_VisionInterface_getVision<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_BaseInterface_ping : public Callback_BaseInterface_ping_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Double);

    CallbackNC_BaseInterface_ping(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VisionModule::BaseInterfacePrx __proxy = ::VisionModule::BaseInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Double __ret;
        try
        {
            __ret = __proxy->end_ping(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_BaseInterface_pingPtr
newCallback_BaseInterface_ping(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Double), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BaseInterface_ping<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_BaseInterface_pingPtr
newCallback_BaseInterface_ping(T* instance, void (T::*cb)(::Ice::Double), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BaseInterface_ping<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_BaseInterface_ping : public Callback_BaseInterface_ping_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Double, const CT&);

    Callback_BaseInterface_ping(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VisionModule::BaseInterfacePrx __proxy = ::VisionModule::BaseInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Double __ret;
        try
        {
            __ret = __proxy->end_ping(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_BaseInterface_pingPtr
newCallback_BaseInterface_ping(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Double, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BaseInterface_ping<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_BaseInterface_pingPtr
newCallback_BaseInterface_ping(T* instance, void (T::*cb)(::Ice::Double, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BaseInterface_ping<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_BaseInterface_update : public Callback_BaseInterface_update_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_BaseInterface_update(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VisionModule::BaseInterfacePrx __proxy = ::VisionModule::BaseInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_update(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_BaseInterface_updatePtr
newCallback_BaseInterface_update(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BaseInterface_update<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_BaseInterface_updatePtr
newCallback_BaseInterface_update(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BaseInterface_update<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_BaseInterface_update : public Callback_BaseInterface_update_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_BaseInterface_update(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VisionModule::BaseInterfacePrx __proxy = ::VisionModule::BaseInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_update(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_BaseInterface_updatePtr
newCallback_BaseInterface_update(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BaseInterface_update<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_BaseInterface_updatePtr
newCallback_BaseInterface_update(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BaseInterface_update<T, CT>(instance, cb, excb, sentcb);
}

}

#endif
